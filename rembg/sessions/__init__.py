from __future__ import annotations

from typing import Dict, List, Optional

from .base import BaseSession

sessions: Dict[str, type[BaseSession]] = {}

# Map of user facing aliases to the canonical session identifier.  This keeps
# backwards compatibility with alternative spellings that might surface in the
# wild (for example values stored in configuration files or URLs generated by
# older front-ends).
_SESSION_ALIASES: Dict[str, str] = {
    "bria_rmbg14": "bria-rmbg14",
    "bria-rmbg-v1.4": "bria-rmbg14",
}


def normalize_session_name(model_name: str) -> str:
    """Return the canonical name used to register the session class."""

    normalized = model_name.strip().lower()
    return _SESSION_ALIASES.get(normalized, normalized)


def get_session_class(model_name: str) -> Optional[type[BaseSession]]:
    """Look up the session class associated with ``model_name``."""

    return sessions.get(normalize_session_name(model_name))

from .birefnet_general import BiRefNetSessionGeneral

sessions[BiRefNetSessionGeneral.name()] = BiRefNetSessionGeneral

from .birefnet_general_lite import BiRefNetSessionGeneralLite

sessions[BiRefNetSessionGeneralLite.name()] = BiRefNetSessionGeneralLite

from .birefnet_portrait import BiRefNetSessionPortrait

sessions[BiRefNetSessionPortrait.name()] = BiRefNetSessionPortrait

from .birefnet_dis import BiRefNetSessionDIS

sessions[BiRefNetSessionDIS.name()] = BiRefNetSessionDIS

from .birefnet_hrsod import BiRefNetSessionHRSOD

sessions[BiRefNetSessionHRSOD.name()] = BiRefNetSessionHRSOD

from .birefnet_cod import BiRefNetSessionCOD

sessions[BiRefNetSessionCOD.name()] = BiRefNetSessionCOD

from .birefnet_massive import BiRefNetSessionMassive

sessions[BiRefNetSessionMassive.name()] = BiRefNetSessionMassive

from .dis_anime import DisSession

sessions[DisSession.name()] = DisSession

from .dis_custom import DisCustomSession

sessions[DisCustomSession.name()] = DisCustomSession

from .dis_general_use import DisSession as DisSessionGeneralUse

sessions[DisSessionGeneralUse.name()] = DisSessionGeneralUse

from .sam import SamSession

sessions[SamSession.name()] = SamSession

from .silueta import SiluetaSession

sessions[SiluetaSession.name()] = SiluetaSession

from .u2net_cloth_seg import Unet2ClothSession

sessions[Unet2ClothSession.name()] = Unet2ClothSession

from .u2net_custom import U2netCustomSession

sessions[U2netCustomSession.name()] = U2netCustomSession

from .u2net_human_seg import U2netHumanSegSession

sessions[U2netHumanSegSession.name()] = U2netHumanSegSession

from .u2net import U2netSession

sessions[U2netSession.name()] = U2netSession

from .u2netp import U2netpSession

sessions[U2netpSession.name()] = U2netpSession

from .bria_rmbg import BriaRmBgSession

sessions[BriaRmBgSession.name()] = BriaRmBgSession

from .bria_rmbg14 import BriaRmBg14Session

sessions[BriaRmBg14Session.name()] = BriaRmBg14Session

from .ben_custom import BenCustomSession

sessions[BenCustomSession.name()] = BenCustomSession

# Expose both canonical names and known aliases so that user input validation
# (see the HTTP server) accepts the alternative spellings as well.
_alias_names = [alias for alias, target in _SESSION_ALIASES.items() if target in sessions]
sessions_names = list(dict.fromkeys([*sessions.keys(), *_alias_names]))
sessions_class = list(sessions.values())

__all__ = [
    "get_session_class",
    "normalize_session_name",
    "sessions",
    "sessions_class",
    "sessions_names",
]
